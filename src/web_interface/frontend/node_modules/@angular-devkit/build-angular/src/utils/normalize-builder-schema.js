"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular-devkit/core");
const normalize_asset_patterns_1 = require("./normalize-asset-patterns");
const normalize_file_replacements_1 = require("./normalize-file-replacements");
const normalize_optimization_1 = require("./normalize-optimization");
const normalize_source_maps_1 = require("./normalize-source-maps");
function normalizeBuilderSchema(host, root, builderConfig) {
    const { options } = builderConfig;
    const projectRoot = core_1.resolve(root, builderConfig.root);
    const syncHost = new core_1.virtualFs.SyncDelegateHost(host);
    // todo: this should be unknown
    // tslint:disable-next-line:no-any
    const isKarmaBuilderSchema = (options) => !options.hasOwnProperty('optimization');
    // todo: this should be unknown
    // tslint:disable-next-line:no-any
    const isBuildWebpackServerSchema = (options) => !options.hasOwnProperty('assets');
    const assets = isBuildWebpackServerSchema(options)
        ? {}
        : {
            assets: normalize_asset_patterns_1.normalizeAssetPatterns(options.assets, syncHost, root, projectRoot, builderConfig.sourceRoot),
        };
    const normalizedSourceMapOptions = normalize_source_maps_1.normalizeSourceMaps(options.sourceMap);
    // todo: remove when removing the deprecations
    normalizedSourceMapOptions.vendor
        = normalizedSourceMapOptions.vendor || !!options.vendorSourceMap;
    const optimization = isKarmaBuilderSchema(options)
        ? {}
        : options.optimization || {};
    return Object.assign({}, options, assets, { fileReplacements: normalize_file_replacements_1.normalizeFileReplacements(options.fileReplacements, syncHost, root), optimization: normalize_optimization_1.normalizeOptimization(optimization), sourceMap: normalize_source_maps_1.normalizeSourceMaps(options.sourceMap) });
}
exports.normalizeBuilderSchema = normalizeBuilderSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplLWJ1aWxkZXItc2NoZW1hLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9hbmd1bGFyX2RldmtpdC9idWlsZF9hbmd1bGFyL3NyYy91dGlscy9ub3JtYWxpemUtYnVpbGRlci1zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBOzs7Ozs7R0FNRzs7QUFJSCwrQ0FBZ0U7QUFJaEUseUVBQW9FO0FBQ3BFLCtFQUEwRTtBQUMxRSxxRUFBaUU7QUFDakUsbUVBQThEO0FBRTlELFNBQWdCLHNCQUFzQixDQUc5QixJQUF3QixFQUN4QixJQUFVLEVBQ1YsYUFBb0M7SUFPeEMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLGFBQWEsQ0FBQztJQUNsQyxNQUFNLFdBQVcsR0FBRyxjQUFPLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxNQUFNLFFBQVEsR0FBRyxJQUFJLGdCQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFdEQsK0JBQStCO0lBQy9CLGtDQUFrQztJQUNsQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsT0FBWSxFQUFpQyxFQUFFLENBQ3pFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUU1QywrQkFBK0I7SUFDL0Isa0NBQWtDO0lBQ2xDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxPQUFZLEVBQXVDLEVBQUUsQ0FDckYsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXRDLE1BQU0sTUFBTSxHQUFHLDBCQUEwQixDQUFDLE9BQU8sQ0FBQztRQUM5QyxDQUFDLENBQUMsRUFBRTtRQUNKLENBQUMsQ0FBQztZQUNFLE1BQU0sRUFBRSxpREFBc0IsQ0FDMUIsT0FBTyxDQUFDLE1BQU0sRUFDZCxRQUFRLEVBQ1IsSUFBSSxFQUNKLFdBQVcsRUFDWCxhQUFhLENBQUMsVUFBVSxDQUMzQjtTQUNKLENBQUM7SUFFTixNQUFNLDBCQUEwQixHQUFHLDJDQUFtQixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxRSw4Q0FBOEM7SUFDOUMsMEJBQTBCLENBQUMsTUFBTTtVQUMzQiwwQkFBMEIsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUM7SUFFckUsTUFBTSxZQUFZLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxFQUFFO1FBQ0osQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLElBQUksRUFBRSxDQUFDO0lBRWpDLHlCQUdPLE9BQWMsRUFDZCxNQUFNLElBQ1QsZ0JBQWdCLEVBQUUsdURBQXlCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFDckYsWUFBWSxFQUFFLDhDQUFxQixDQUFDLFlBQVksQ0FBQyxFQUNqRCxTQUFTLEVBQUUsMkNBQW1CLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUNuRDtBQUNOLENBQUM7QUF4REQsd0RBd0RDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cblxuaW1wb3J0IHsgQnVpbGRlckNvbmZpZ3VyYXRpb24gfSBmcm9tICdAYW5ndWxhci1kZXZraXQvYXJjaGl0ZWN0JztcbmltcG9ydCB7IFBhdGgsIHJlc29sdmUsIHZpcnR1YWxGcyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCB7IEJyb3dzZXJCdWlsZGVyU2NoZW1hLCBOb3JtYWxpemVkQnJvd3NlckJ1aWxkZXJTY2hlbWEgfSBmcm9tICcuLi9icm93c2VyL3NjaGVtYSc7XG5pbXBvcnQgeyBLYXJtYUJ1aWxkZXJTY2hlbWEsIE5vcm1hbGl6ZWRLYXJtYUJ1aWxkZXJTY2hlbWEgfSBmcm9tICcuLi9rYXJtYS9zY2hlbWEnO1xuaW1wb3J0IHsgQnVpbGRXZWJwYWNrU2VydmVyU2NoZW1hLCBOb3JtYWxpemVkU2VydmVyQnVpbGRlclNlcnZlclNjaGVtYSB9IGZyb20gJy4uL3NlcnZlci9zY2hlbWEnO1xuaW1wb3J0IHsgbm9ybWFsaXplQXNzZXRQYXR0ZXJucyB9IGZyb20gJy4vbm9ybWFsaXplLWFzc2V0LXBhdHRlcm5zJztcbmltcG9ydCB7IG5vcm1hbGl6ZUZpbGVSZXBsYWNlbWVudHMgfSBmcm9tICcuL25vcm1hbGl6ZS1maWxlLXJlcGxhY2VtZW50cyc7XG5pbXBvcnQgeyBub3JtYWxpemVPcHRpbWl6YXRpb24gfSBmcm9tICcuL25vcm1hbGl6ZS1vcHRpbWl6YXRpb24nO1xuaW1wb3J0IHsgbm9ybWFsaXplU291cmNlTWFwcyB9IGZyb20gJy4vbm9ybWFsaXplLXNvdXJjZS1tYXBzJztcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUJ1aWxkZXJTY2hlbWE8QnVpbGRlckNvbmZpZ3VyYXRpb25UIGV4dGVuZHNcbiAgICBCdWlsZGVyQ29uZmlndXJhdGlvbjxCcm93c2VyQnVpbGRlclNjaGVtYSB8IEJ1aWxkV2VicGFja1NlcnZlclNjaGVtYSB8IEthcm1hQnVpbGRlclNjaGVtYT4sXG4gICAgT3B0aW9uc1QgPSBCdWlsZGVyQ29uZmlndXJhdGlvblRbJ29wdGlvbnMnXT4oXG4gICAgICAgIGhvc3Q6IHZpcnR1YWxGcy5Ib3N0PHt9PixcbiAgICAgICAgcm9vdDogUGF0aCxcbiAgICAgICAgYnVpbGRlckNvbmZpZzogQnVpbGRlckNvbmZpZ3VyYXRpb25ULFxuKTpcbiAgICBPcHRpb25zVCBleHRlbmRzIEJyb3dzZXJCdWlsZGVyU2NoZW1hID8gTm9ybWFsaXplZEJyb3dzZXJCdWlsZGVyU2NoZW1hIDpcbiAgICBPcHRpb25zVCBleHRlbmRzIEJ1aWxkV2VicGFja1NlcnZlclNjaGVtYSA/IE5vcm1hbGl6ZWRTZXJ2ZXJCdWlsZGVyU2VydmVyU2NoZW1hIDpcbiAgICAvLyB0b2RvIHNob3VsZCBiZSB1bmtub3duXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIE9wdGlvbnNUIGV4dGVuZHMgS2FybWFCdWlsZGVyU2NoZW1hID8gTm9ybWFsaXplZEthcm1hQnVpbGRlclNjaGVtYSA6IGFueSB7XG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSBidWlsZGVyQ29uZmlnO1xuICAgIGNvbnN0IHByb2plY3RSb290ID0gcmVzb2x2ZShyb290LCBidWlsZGVyQ29uZmlnLnJvb3QpO1xuICAgIGNvbnN0IHN5bmNIb3N0ID0gbmV3IHZpcnR1YWxGcy5TeW5jRGVsZWdhdGVIb3N0KGhvc3QpO1xuXG4gICAgLy8gdG9kbzogdGhpcyBzaG91bGQgYmUgdW5rbm93blxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICBjb25zdCBpc0thcm1hQnVpbGRlclNjaGVtYSA9IChvcHRpb25zOiBhbnkpOiBvcHRpb25zIGlzIEthcm1hQnVpbGRlclNjaGVtYSA9PlxuICAgICAgICAhb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnb3B0aW1pemF0aW9uJyk7XG5cbiAgICAvLyB0b2RvOiB0aGlzIHNob3VsZCBiZSB1bmtub3duXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIGNvbnN0IGlzQnVpbGRXZWJwYWNrU2VydmVyU2NoZW1hID0gKG9wdGlvbnM6IGFueSk6IG9wdGlvbnMgaXMgQnVpbGRXZWJwYWNrU2VydmVyU2NoZW1hID0+XG4gICAgICAgICFvcHRpb25zLmhhc093blByb3BlcnR5KCdhc3NldHMnKTtcblxuICAgIGNvbnN0IGFzc2V0cyA9IGlzQnVpbGRXZWJwYWNrU2VydmVyU2NoZW1hKG9wdGlvbnMpXG4gICAgICAgID8ge31cbiAgICAgICAgOiB7XG4gICAgICAgICAgICBhc3NldHM6IG5vcm1hbGl6ZUFzc2V0UGF0dGVybnMoXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5hc3NldHMsXG4gICAgICAgICAgICAgICAgc3luY0hvc3QsXG4gICAgICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgICAgICBwcm9qZWN0Um9vdCxcbiAgICAgICAgICAgICAgICBidWlsZGVyQ29uZmlnLnNvdXJjZVJvb3QsXG4gICAgICAgICAgICApLFxuICAgICAgICB9O1xuXG4gICAgY29uc3Qgbm9ybWFsaXplZFNvdXJjZU1hcE9wdGlvbnMgPSBub3JtYWxpemVTb3VyY2VNYXBzKG9wdGlvbnMuc291cmNlTWFwKTtcbiAgICAvLyB0b2RvOiByZW1vdmUgd2hlbiByZW1vdmluZyB0aGUgZGVwcmVjYXRpb25zXG4gICAgbm9ybWFsaXplZFNvdXJjZU1hcE9wdGlvbnMudmVuZG9yXG4gICAgICAgID0gbm9ybWFsaXplZFNvdXJjZU1hcE9wdGlvbnMudmVuZG9yIHx8ICEhb3B0aW9ucy52ZW5kb3JTb3VyY2VNYXA7XG5cbiAgICBjb25zdCBvcHRpbWl6YXRpb24gPSBpc0thcm1hQnVpbGRlclNjaGVtYShvcHRpb25zKVxuICAgICAgICA/IHt9XG4gICAgICAgIDogb3B0aW9ucy5vcHRpbWl6YXRpb24gfHwge307XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAvLyB0b2RvIHJlbW92ZSBhbnkgY2FzaW5nIHdoZW4gdXNpbmcgdHlwZXNjcmlwdCAzLjJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICAuLi5vcHRpb25zIGFzIGFueSxcbiAgICAgICAgLi4uYXNzZXRzLFxuICAgICAgICBmaWxlUmVwbGFjZW1lbnRzOiBub3JtYWxpemVGaWxlUmVwbGFjZW1lbnRzKG9wdGlvbnMuZmlsZVJlcGxhY2VtZW50cywgc3luY0hvc3QsIHJvb3QpLFxuICAgICAgICBvcHRpbWl6YXRpb246IG5vcm1hbGl6ZU9wdGltaXphdGlvbihvcHRpbWl6YXRpb24pLFxuICAgICAgICBzb3VyY2VNYXA6IG5vcm1hbGl6ZVNvdXJjZU1hcHMob3B0aW9ucy5zb3VyY2VNYXApLFxuICAgIH07XG59XG4iXX0=